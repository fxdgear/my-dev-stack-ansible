---
- name: Check if NVM is already installed
  become: yes
  become_user: "{{ user.name }}"
  stat:
    path: "{{ user.home }}/.nvm/nvm.sh"
  register: nvm_file

- name: Install NVM
  become: yes
  become_user: "{{ user.name }}"
  shell: >
    curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
    creates={{ user.home }}/.nvm/nvm.sh
  when: not nvm_file.stat.exists

- name: Get the list of installed Node versions
  become: yes
  become_user: "{{ user.name }}"
  shell: "nvm list || true"
  args:
    executable: /usr/bin/fish  # Use /bin/fish for Fish shell-specific commands
  register: installed_versions
  ignore_errors: yes

- name: Set installed_versions to an empty list if it's not defined
  set_fact:
    installed_versions: "{{ installed_versions.stdout_lines | default([]) }}"

- name: Parse installed Node.js versions
  set_fact:
    installed_versions_list: "{{ installed_versions | map('regex_search', 'v(\\d+\\.\\d+\\.\\d+)') | select('string') | list }}"

- name: Print installed versions
  shell: "echo {{installed_versions_list}}"

- name: Print desired versions
  shell: "echo {{node_versions}}"


- name: Install missing node versions
  become: yes
  become_user: "{{ user.name }}"
  shell: "nvm install {{ item }}"
  args:
    executable: /usr/bin/fish  # Use /bin/fish for Fish shell-specific commands
  with_items: "{{ node_versions }}"
  when: item not in installed_versions_list

- name: Remove node versions not in the desired list
  become: yes
  become_user: "{{ user.name }}"
  shell: "nvm uninstall {{ item }}"
  args:
    executable: /usr/bin/fish  # Use /bin/fish for Fish shell-specific commands
  with_items: "{{ installed_versions_list }}"
  when: item not in node_versions
